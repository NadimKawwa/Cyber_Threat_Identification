from FakePersona import getPage
from bs4 import BeautifulSoup as bs
from fake_useragent import UserAgent
from requests import get
from random import shuffle, randrange

def parseExploitUrl(url):
    """
    given a URL from Exploit Database return if possible a dict:
    1) CVE
    2) Is EDB Verified?
    3) Type
    4) Has application for exploit?
    5) Platform
    6) Date published
    
    """
    
    #create a dict with empty values
    exploit_db_dict = {'url':url,
                       'CVE': None, 
                       'Verified': False,
                       'Type': None, 
                       'HasApplication': False, 
                       'Platform': None, 
                       'Date': None,
                       'Critical': False}
    
    
    soup = getPage(url)
    if soup=='':
        return exploit_db_dict
    
    ###1) CVE ###
    
    #get h6 stats title
    h6_stats_title = soup.find_all('h6', {'class': 'stats-title'})
    
    #explore entry at index 1 of h6 stats-title to get CVE
    try:
        h6_stats_title_cve = h6_stats_title[1].find('a')
    except IndexError:
        h6_stats_title_cve=None
        
    #we know the CVE if it points to a a URL
    if h6_stats_title_cve:
        exploit_db_dict['CVE'] = h6_stats_title_cve['href']
        
    
    
    ###2) EDB Verified ###
    #find a checkmark, if present then the EDB is verified
    checkmark = soup.find_all('i', {'class':'mdi mdi-24px mdi-check'})
    if checkmark:
        exploit_db_dict['Verified'] = True
    
    
    ###3) Type###
    try:
        exploit_db_dict['Type'] = h6_stats_title[3].text.strip(' \t\n\r')
    except IndexError:
        exploit_db_dict['Type'] = None
    
    
    ###4) Has application for exploit?###
    #check if it has a download button
    package_down = soup.find_all('i', {'class': 'mdi mdi-package-down mdi-24px text-primary'})
    if package_down:
        exploit_db_dict['HasApplication'] = True
    
    
    ###5) Platform ###
    try :
        exploit_db_dict['Platform'] = h6_stats_title[4].text.strip(' \t\n\r')
    except IndexError:
        exploit_db_dict['Platform'] = None
    
    ###6) Date ###
    try:
        exploit_db_dict['Date'] = h6_stats_title[5].text.strip(' \t\n\r')
    except IndexError:
        exploit_db_dict['Date'] = None
    
    
    ### 7) Is it Verified & Has application ==> CRITICAL ###
    if (exploit_db_dict['Verified'] == True and exploit_db_dict['HasApplication'] == True):
        exploit_db_dict['Critical'] = True
    
    return exploit_db_dict







